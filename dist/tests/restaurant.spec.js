"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _dotenv = _interopRequireDefault(require("dotenv"));
var _path = _interopRequireDefault(require("path"));








var _config = _interopRequireDefault(require("../app/config"));


require("../app/config/db");
var http = _interopRequireWildcard(require("http"));

require("../app/models/restaurant");













var _app = _interopRequireDefault(require("../app"));





var _restaurant2 = require("../app/services/restaurant");process.env.NODE_ENV = 'test';var bluebird = require('bluebird'); // dotenv.config({ path: path.resolve('/Users/krish/workshops/mindtree-301-node/services/restaurant/test.env')});
// console.log('path is ', path.resolve('/Users/krish/workshops/mindtree-301-node/services/restaurant/test.env'))
// process.env.MONGO_URL="mongodb://localhost/mocha-test"
// process.env.MONGO_URL="mongodb://localhost/mocha-test"
console.log('***config', _config["default"]);var mongoose = require("mongoose");var Restaurant = mongoose.model("Restaurant"); //Require the dev-dependencies
var chai = require('chai');var chaiHttp = require('chai-http');var sinon = require('sinon');var sinonTest = require('sinon-test');var test = sinonTest(sinon);var should = chai.should();var expect = chai.expect;var supertest = require('supertest'); // const apptest = supertest(http.createServer(app.callback()));
chai.use(chaiHttp); //Our parent block
describe('Restaurant', function () {
  beforeEach(function (done) {//Before each test we empty the database
    Restaurant.remove({}, function (err) {
      done();
    });
  });
  /*
        * Test the /GET route
        */
  describe('/GET /restaurants', function () {
    it('it should GET all the Restaurants', function (done) {
      chai.request(_app["default"]).
      get('/restaurants').
      end(function (err, res) {
        res.should.have.status(200);
        res.body.should.be.a('array');
        res.body.length.should.be.eql(0);
        done();
      });
    });
  });




  describe('/POST /restaurants', function () {
    it('it should Create a restaurant', function (done) {
      var restaurant = {
        "name": "TEST-123",
        "location": {
          "type": "Point",
          "coordinates": [12.9716, 77.5946] },

        "city": "Bangalore",
        "cuisine": ["veg"],
        "budget": 250,
        "rating": 4.6,
        "menu": [{ "title": "Meal", "price": 250 }] };


      chai.request(_app["default"]).
      post('/restaurants').
      send(restaurant).
      end(function (err, res) {
        res.should.have.status(200);
        res.body.should.be.a('object');

        res.body.should.have.property('name');
        res.body.should.have.property('_id');
        res.body.should.have.property('name').eql('TEST-123');
        res.body.should.have.property('budget').eql(250);


        done();
      });
    });

  });



  describe('Test model ', function () {
    it('should be invalid if required prorperties are empty', function (done) {
      // var restaurant = new Restaurant( {
      //     location: {
      //         type: 'Point',
      //         coordinates: []
      //     }
      // }
      // );

      var restaurant = new Restaurant();

      restaurant.validate(function (err) {
        //err.errors.propertyname

        // expect(err).to.be.null;
        expect(err.errors).to.exist; // property name is not working
        done();
      });
    });


    it('should call back with true when repost exists', test(function (done) {
      var responseObject = { name: 'foo' };
      this.stub(Restaurant, 'findOne').yields(null, responseObject);


      Restaurant.findOne({}, function (err, result) {
        console.log(result);
        expect(result).to.have.property('name');

        expect(result.name).to.equal('foo');



        done();
      });
    }));



    it('should call mock test', function (done) {
      var responseObject = { name: 'foo' };


      var findOneStub = sinon.stub(Restaurant, "findOne").yields(null, responseObject);

      Restaurant.findOne({}, function (err, result) {
        console.log(result);
        expect(result).to.have.property('name');

        expect(result.name).to.equal('foo');

        // to release the stuff
        findOneStub.restore();

        done();
      });
    });


    it('should call service with getRestaurant with id', function (done) {
      var responseObject = { id: '12345', name: 'foo' };


      var findByIdStub = sinon.stub(Restaurant, "findById").
      usingPromise(bluebird.Promise).
      resolves(responseObject);
      (0, _restaurant2.getRestaurant)('12345').
      then(function (result) {
        expect(result).to.have.property('name');
        expect(result.name).to.equal('foo');
        expect(result.id).to.equal('12345');

        result.id.should.equal('12345');


        // to release the stuff
        findByIdStub.restore();

        done();
      });

    });



  });




});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,