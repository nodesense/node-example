"use strict";
// var consul = require('consul')();
var Bluebird = require('bluebird');
var CONSUL_HOST = process.env.CONSUL_HOST || 'localhost';
var APP_SERVICE_NAME = process.env.APP_SERVICE_NAME || 'SEARCH-SERVICE';
var IP_ADDRESS = process.env.IP_ADDRESS || '127.0.0.1';
var PORT = process.env.PORT || 7777;
var CONSUL_ID = require('uuid').v4();

console.log('consul register port ', PORT);

function fromCallback(fn) {
  return new Bluebird(function (resolve, reject) {
    try {
      return fn(function (err, data, res) {
        if (err) {
          err.res = res;
          return reject(err);
        }
        return resolve([data, res]);
      });
    } catch (err) {
      return reject(err);
    }
  });
}
var consul = require('consul')({ promisify: fromCallback,
  host: CONSUL_HOST });


consul.acl.bootstrap(function (err, result) {
  console.log(err, result);
  // if (err) throw err;
});


consul.agent.members(function (err, result) {
  console.log('memebrs', err, result);
  if (err) throw err;
});



var details = {
  name: APP_SERVICE_NAME + Math.ceil(Math.random() * 100), // service group name search or order
  address: IP_ADDRESS,
  port: PORT,
  id: CONSUL_ID,
  check: {
    ttl: '10s',
    deregister_critical_service_after: '1m' } };


consul.agent.service.register(details, function (err) {
  // schedule heartbeat
  console.log("register ", err);
});

setInterval(function () {
  consul.agent.check.pass({ id: "service:".concat(CONSUL_ID) }, function (err) {
    if (err) throw new Error(err);
    console.log('told Consul that we are healthy');
  });
}, 5 * 1000);

process.on('SIGINT', function () {
  console.log('SIGINT. De-Registering...');
  var details = { id: CONSUL_ID };

  consul.agent.service.deregister(details, function (err) {
    console.log('de-registered.', err);
    process.exit();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcHAvY29uZmlnL2NvbnN1bC5qcyJdLCJuYW1lcyI6WyJCbHVlYmlyZCIsInJlcXVpcmUiLCJDT05TVUxfSE9TVCIsInByb2Nlc3MiLCJlbnYiLCJBUFBfU0VSVklDRV9OQU1FIiwiSVBfQUREUkVTUyIsIlBPUlQiLCJDT05TVUxfSUQiLCJ2NCIsImNvbnNvbGUiLCJsb2ciLCJmcm9tQ2FsbGJhY2siLCJmbiIsInJlc29sdmUiLCJyZWplY3QiLCJlcnIiLCJkYXRhIiwicmVzIiwiY29uc3VsIiwicHJvbWlzaWZ5IiwiaG9zdCIsImFjbCIsImJvb3RzdHJhcCIsInJlc3VsdCIsImFnZW50IiwibWVtYmVycyIsImRldGFpbHMiLCJuYW1lIiwiTWF0aCIsImNlaWwiLCJyYW5kb20iLCJhZGRyZXNzIiwicG9ydCIsImlkIiwiY2hlY2siLCJ0dGwiLCJkZXJlZ2lzdGVyX2NyaXRpY2FsX3NlcnZpY2VfYWZ0ZXIiLCJzZXJ2aWNlIiwicmVnaXN0ZXIiLCJzZXRJbnRlcnZhbCIsInBhc3MiLCJFcnJvciIsIm9uIiwiZGVyZWdpc3RlciIsImV4aXQiXSwibWFwcGluZ3MiOiI7QUFDQTtBQUNBLElBQUlBLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBdEI7QUFDQSxJQUFNQyxXQUFXLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRixXQUFaLElBQTJCLFdBQS9DO0FBQ0EsSUFBTUcsZ0JBQWdCLEdBQUdGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxnQkFBWixJQUFnQyxnQkFBekQ7QUFDQSxJQUFNQyxVQUFVLEdBQUdILE9BQU8sQ0FBQ0MsR0FBUixDQUFZRSxVQUFaLElBQTBCLFdBQTdDO0FBQ0EsSUFBTUMsSUFBSSxHQUFHSixPQUFPLENBQUNDLEdBQVIsQ0FBWUcsSUFBWixJQUFvQixJQUFqQztBQUNBLElBQU1DLFNBQVMsR0FBR1AsT0FBTyxDQUFDLE1BQUQsQ0FBUCxDQUFnQlEsRUFBaEIsRUFBbEI7O0FBRUFDLE9BQU8sQ0FBQ0Ms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LE9BQWhDLEVBQXlDLFVBQUNYLEdBQUQsRUFBUztBQUNoRE4sSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksZ0JBQVosRUFBOEJLLEdBQTlCO0FBQ0FiLElBQUFBLE9BQU8sQ0FBQzBDLElBQVI7QUFDRCxHQUhEO0FBSUQsQ0FSRCIsInNvdXJjZXNDb250ZW50IjpbIlxuLy8gdmFyIGNvbnN1bCA9IHJlcXVpcmUoJ2NvbnN1bCcpKCk7XG52YXIgQmx1ZWJpcmQgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuY29uc3QgQ09OU1VMX0hPU1QgPSBwcm9jZXNzLmVudi5DT05TVUxfSE9TVCB8fCAnbG9jYWxob3N0JztcbmNvbnN0IEFQUF9TRVJWSUNFX05BTUUgPSBwcm9jZXNzLmVudi5BUFBfU0VSVklDRV9OQU1FIHx8ICdTRUFSQ0gtU0VSVklDRSc7XG5jb25zdCBJUF9BRERSRVNTID0gcHJvY2Vzcy5lbnYuSVBfQUREUkVTUyB8fCAnMTI3LjAuMC4xJ1xuY29uc3QgUE9SVCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgNzc3NztcbmNvbnN0IENPTlNVTF9JRCA9IHJlcXVpcmUoJ3V1aWQnKS52NCgpO1xuXG5jb25zb2xlLmxvZygnY29uc3VsIHJlZ2lzdGVyIHBvcnQgJywgUE9SVCk7XG5cbmZ1bmN0aW9uIGZyb21DYWxsYmFjayhmbikge1xuICAgIHJldHVybiBuZXcgQmx1ZWJpcmQoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gZm4oZnVuY3Rpb24oZXJyLCBkYXRhLCByZXMpIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBlcnIucmVzID0gcmVzO1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShbZGF0YSwgcmVzXSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxudmFyIGNvbnN1bCA9IHJlcXVpcmUoJ2NvbnN1bCcpKHsgcHJvbWlzaWZ5OiBmcm9tQ2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0OiBDT05TVUxfSE9TVCB9KTtcblxuXG5jb25zdWwuYWNsLmJvb3RzdHJhcChmdW5jdGlvbihlcnIsIHJlc3VsdCkge1xuICAgIGNvbnNvbGUubG9nKGVyciwgcmVzdWx0KVxuICAgIC8vIGlmIChlcnIpIHRocm93IGVycjtcbiAgfSk7XG5cblxuICBjb25zdWwuYWdlbnQubWVtYmVycyhmdW5jdGlvbihlcnIsIHJlc3VsdCkge1xuICAgIGNvbnNvbGUubG9nKCdtZW1lYnJzJywgZXJyLCByZXN1bHQpXG4gICAgaWYgKGVycikgdGhyb3cgZXJyO1xuICB9KTtcblxuXG5cbiAgbGV0IGRldGFpbHMgPSB7XG4gICAgbmFtZTogQVBQX1NFUlZJQ0VfTkFNRSArIE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwKSwgLy8gc2VydmljZSBncm91cCBuYW1lIHNlYXJjaCBvciBvcmRlclxuICAgIGFkZHJlc3M6IElQX0FERFJFU1MsXG4gICAgcG9ydDogUE9SVCxcbiAgICBpZDogQ09OU1VMX0lELFxuICAgIGNoZWNrOiB7XG4gICAgICB0dGw6ICcxMHMnLFxuICAgICAgZGVyZWdpc3Rlcl9jcml0aWNhbF9zZXJ2aWNlX2FmdGVyOiAnMW0nXG4gICAgfVxuICB9O1xuICBjb25zdWwuYWdlbnQuc2VydmljZS5yZWdpc3RlcihkZXRhaWxzLCBlcnIgPT4ge1xuICAgIC8vIHNjaGVkdWxlIGhlYXJ0YmVhdFxuICAgIGNvbnNvbGUubG9nKFwicmVnaXN0ZXIgXCIsIGVycilcbiAgfSk7IFxuICBcbiAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgY29uc3VsLmFnZW50LmNoZWNrLnBhc3Moe2lkOmBzZXJ2aWNlOiR7Q09OU1VMX0lEfWB9LCBlcnIgPT4ge1xuICAgICAgICBpZiAoZXJyKSB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3RvbGQgQ29uc3VsIHRoYXQgd2UgYXJlIGhlYWx0aHknKTtcbiAgICAgIH0pO1xuICAgIH0sIDUgKiAxMDAwKTtcbiAgXG4gICAgcHJvY2Vzcy5vbignU0lHSU5UJywgKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ1NJR0lOVC4gRGUtUmVnaXN0ZXJpbmcuLi4nKTtcbiAgICAgIGxldCBkZXRhaWxzID0ge2lkOiBDT05TVUxfSUR9O1xuICAgIFxuICAgICAgY29uc3VsLmFnZW50LnNlcnZpY2UuZGVyZWdpc3RlcihkZXRhaWxzLCAoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdkZS1yZWdpc3RlcmVkLicsIGVycik7XG4gICAgICAgIHByb2Nlc3MuZXhpdCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIFxuICAgICJdfQ==